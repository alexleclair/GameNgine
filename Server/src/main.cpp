#include "main.h"

//The main function sets up the Reactor.
int ACE_TMAIN(int, ACE_TCHAR **) {
	//--- Core operations
	setupSignals();
	//--- MAIN CODE
	printGraffiti();
	std::cout << "Starting up...\n";
	//We want to create a normal reactor
	std::cout << "Creating the ACE_Reactor...\n";
	ACE_Reactor reactor;
	// create a new accept handler using that reactor
	//(heap allocation because it's really not something you want in the stack)
	std::cout << "Creating the Acceptor...\n";
	ACE_Auto_Ptr<Acceptor> acceptor(new (ACE_nothrow) Acceptor(&reactor));
	if (acceptor.get() == 0) {
		std::cerr << "Failed to allocate Acceptor" << std::endl;
		return -1;
	}
	//Open the accept handler. Basically, this handler will register itself to the reactor
	//and handle every ACCEPT_MASK events.
    if (acceptor->open() == -1) {
        //We couldn't open() it, we have a serious problem with the reactor.
		//Forcefully free from memory the AcceptHandler object and terminate the program.
        std::cerr << "Failed to open Acceptor. Exiting." << std::endl;
		return -1;
    }
	//We're ready!
	std::cout << "Server ready!\n";
	//Let the reactor run and wait for events
	reactor.run_reactor_event_loop();
	//--- Terminate program
	return 0;
}

void setupSignals() {
	//Abnormal termination, such as instigated by the abort function. (Abort.)
	signal(SIGABRT, handle_signal);
	//Erroneous arithmetic operation, such as divide by 0 or overflow. (Floating point exception.)
	signal(SIGFPE, handle_signal);
	//An invalid object program has been detected. This usually means that there is an illegal instruction in the program. (Illegal instruction.)
	signal(SIGILL, handle_signal);
	//Interactive attention signal; on interactive systems this is usually generated by typing some break-in key at the terminal. (Interrupt.)
	signal(SIGINT, handle_signal);
	//Invalid storage access; most frequently caused by attempting to store some value in an object pointed to by a bad pointer. (Segment violation.)
	signal(SIGSEGV, handle_signal);
	//Termination request made to the program. (Terminate.)
	signal(SIGTERM, handle_signal);
}

void printGraffiti() {
	std::cout << "  _______                          ______          __\n";
	std::cout << " |   _   |.---.-..--------..-----.|   _  \\ .-----.|__|.-----..-----.\n";
	std::cout << " |.  |___||  _  ||        ||  -__||.  |   ||  _  ||  ||     ||  -__|\n";
	std::cout << " |.  |   ||___._||__|__|__||_____||.  |   ||___  ||__||__|__||_____|\n";
	std::cout << " |:  1   |                        |:  |   ||_____|\n";
	std::cout << " |::.. . |                        |::.|   |  Version " << NGINE_VERSION_CANDIDATE << " candidate\n";
	std::cout << " `-------'                        `--- ---' Visit GitHub for details\n";
}

void handle_signal(int signal) {
	std::cout << "SIGNAL RECEIVED: " << signal << std::endl;
	std::cout << "Exiting..." << std::endl;
	exit(EXIT_FAILURE);
}